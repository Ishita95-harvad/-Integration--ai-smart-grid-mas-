import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from prophet import Prophet
from sklearn.preprocessing import MinMaxScaler
from keras.models import Model
from keras.layers import Input, Dense
import io

st.set_page_config(page_title="Smart Grid: Forecast & Detect", layout="wide")

st.title("🔋 Smart Grid Live Forecasting & Anomaly Detection")

# Upload Dataset
uploaded_file = st.file_uploader("📤 Upload energy_weather_data.csv", type="csv")
if uploaded_file:
    df = pd.read_csv(uploaded_file, parse_dates=["timestamp"])
    df.set_index("timestamp", inplace=True)
    st.success("✅ Data loaded successfully!")

    st.subheader("🔍 Data Preview")
    st.write(df.head())

    # Forecasting with Prophet
    st.subheader("📈 Forecasting: Load Demand using Prophet")
    prophet_df = df[["load_demand_kw"]].reset_index()
    prophet_df.columns = ["ds", "y"]

    model = Prophet()
    model.fit(prophet_df)

    future = model.make_future_dataframe(periods=24, freq='H')
    forecast = model.predict(future)

    fig1 = model.plot(forecast)
    st.pyplot(fig1)

    st.markdown("**Forecast (Next 24 Hours):**")
    st.write(forecast[["ds", "yhat", "yhat_lower", "yhat_upper"]].tail(24))

    # Anomaly Detection using Autoencoder
    st.subheader("🚨 Anomaly Detection (Load Demand)")

    def build_autoencoder(input_dim):
        input_layer = Input(shape=(input_dim,))
        encoded = Dense(8, activation='relu')(input_layer)
        decoded = Dense(input_dim, activation='linear')(encoded)
        autoencoder = Model(inputs=input_layer, outputs=decoded)
        autoencoder.compile(optimizer='adam', loss='mse')
        return autoencoder

    scaler = MinMaxScaler()
    scaled_data = scaler.fit_transform(df[["load_demand_kw"]])

    autoencoder = build_autoencoder(scaled_data.shape[1])
    autoencoder.fit(scaled_data, scaled_data, epochs=20, batch_size=32, shuffle=True, verbose=0)

    reconstructions = autoencoder.predict(scaled_data)
    mse = np.mean(np.power(scaled_data - reconstructions, 2), axis=1)
    threshold = np.percentile(mse, 95)
    anomalies = mse > threshold

    df["Anomaly"] = anomalies
    st.markdown(f"Anomaly Threshold: `{threshold:.5f}`")

    fig2, ax = plt.subplots(figsize=(12, 4))
    ax.plot(df.index, df["load_demand_kw"], label='Load')
    ax.scatter(df.index[df["Anomaly"]], df["load_demand_kw"][df["Anomaly"]],
               color='red', label='Anomaly')
    ax.legend()
    ax.set_title("Load Demand & Anomalies")
    st.pyplot(fig2)

    st.download_button("📥 Download Forecasted Data", forecast.to_csv(index=False), "forecast.csv", "text/csv")
else:
    st.warning("📌 Please upload your dataset to begin.")
